// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: vns/vns.proto

package vns

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BasicVNSServiceClient is the client API for BasicVNSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasicVNSServiceClient interface {
	Optimize(ctx context.Context, in *OptimizeRequest, opts ...grpc.CallOption) (*OptimizeResponse, error)
}

type basicVNSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBasicVNSServiceClient(cc grpc.ClientConnInterface) BasicVNSServiceClient {
	return &basicVNSServiceClient{cc}
}

func (c *basicVNSServiceClient) Optimize(ctx context.Context, in *OptimizeRequest, opts ...grpc.CallOption) (*OptimizeResponse, error) {
	out := new(OptimizeResponse)
	err := c.cc.Invoke(ctx, "/vns.BasicVNSService/Optimize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasicVNSServiceServer is the server API for BasicVNSService service.
// All implementations must embed UnimplementedBasicVNSServiceServer
// for forward compatibility
type BasicVNSServiceServer interface {
	Optimize(context.Context, *OptimizeRequest) (*OptimizeResponse, error)
	mustEmbedUnimplementedBasicVNSServiceServer()
}

// UnimplementedBasicVNSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBasicVNSServiceServer struct {
}

func (UnimplementedBasicVNSServiceServer) Optimize(context.Context, *OptimizeRequest) (*OptimizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Optimize not implemented")
}
func (UnimplementedBasicVNSServiceServer) mustEmbedUnimplementedBasicVNSServiceServer() {}

// UnsafeBasicVNSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasicVNSServiceServer will
// result in compilation errors.
type UnsafeBasicVNSServiceServer interface {
	mustEmbedUnimplementedBasicVNSServiceServer()
}

func RegisterBasicVNSServiceServer(s grpc.ServiceRegistrar, srv BasicVNSServiceServer) {
	s.RegisterService(&BasicVNSService_ServiceDesc, srv)
}

func _BasicVNSService_Optimize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptimizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicVNSServiceServer).Optimize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vns.BasicVNSService/Optimize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicVNSServiceServer).Optimize(ctx, req.(*OptimizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BasicVNSService_ServiceDesc is the grpc.ServiceDesc for BasicVNSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BasicVNSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vns.BasicVNSService",
	HandlerType: (*BasicVNSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Optimize",
			Handler:    _BasicVNSService_Optimize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vns/vns.proto",
}
